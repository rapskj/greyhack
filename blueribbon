clear_screen
blueribbonver = "1.0"

// starting cosmetics setup here
line = "--------------------"
line1 = "***##########################################################################################################################***"  
print(line1)
print("  .::::.")
print(".::::::::.")
print("|'      `|")
print("|\      /|")
print("| \    / |")
print("\  \  /  /")
print(" \  \/  /")
print("  \  \ /")
print("   \  \")
print(" /  \  \")
print("/   /\  \")
print("/  /  \  \")
print("| /    \ |")
print("|/      \|")
print("`        '")
print(line1)
print("Blue Ribbon - Your almost all-in one suite for exploits.")
print("Current version running: [ <b>" + blueribbonver + "</b> ]")
print(line1)
metaxploit = include_lib("/lib/metaxploit.so") // fetch metaxploit lib
if not metaxploit then
	currentPath = get_shell.host_computer.current_path
	metaxploit = include_lib(currentPath + "/metaxploit.so") // work around if library not in libs folder
end if

cryptools = include_lib("/lib/crypto.so")
if not cryptools then exit("Error: Missing crypto library")

inmenu = "1"
menu = "0"
// show a menu to select the desired operation from.
// will be within a while block in the future, so you can return to the main menu after executing an operation
// if you so wish

selection ="0"


mainmenu = function(menu)
	
	
	if inmenu == "1" and menu == "0" then
		print ("Possible operations (Select number to start)")
		print ("<b>  1.)</b> Target probing\n <b> 2.)</b> Remote attack\n <b> 3.)</b> Local attack\n <b> 4.)</b> Attack Router\n <b> 5.)</b> Crack Wifi \n <b> 6.)</b> Secure your system \n")
		selection = user_input("\n<color=#c90076>Blue Ribbon > </color>")
		menuselect(selection)
		
	end if
	
	
end function 






// probing script starts here 


menuselect = function(selection)
	
	if selection == "1" then
		
		//inmenu = "0"
		print(line)
		print("Probe your target!")
		print(line)
		print("Specify target type...")
		target = user_input("\n<color=#c90076>Blue Ribbon [ Website? Y/N ] >  </color>")
		
		if target == "Y" then
			domain= user_input("<color=#c90076>Blue Ribbon[ Domain ] > </color>")
			ip = nslookup(domain) //since we can not directly probe domains, we need to first convert the domain to IP and then store it in a variable
			print("Probing " + ip + "............")

			router = get_router(ip) // fetch the router 
			ports = router.used_ports // fetch all ports used on router
					print("\n<color=green>			Port information</color>\n")
	
	        for port in ports
		    service = router.port_info(port)
		
		    if port.is_closed then
			print(service+" "+port.port_number+" "+port.get_lan_ip+" <color=green>[CLOSED]</color>")
		    else
			print(service+" "+port.port_number+" "+port.get_lan_ip+" <color=green>[OPEN]</color>")
		    end if
		
	        end for
            print("\n<color=green>			WHOIS information</color>")
	        print(whois(get_router.public_ip)+"\n")
	
	        print("\n<color=green>			Other information</color>\n")
	        kernel = metaxploit.net_use(get_router.public_ip).dump_lib.version
	        print("kernel_router: "+kernel+"\n") 
            
			user_input("Press any key to return to menu")
			menu="0"
			mainmenu(menu)
			
		else
			
			ip = user_input("\n<color=#c90076>Blue Ribbon[ Target IP ] > </color>")
			
			print("Probing " + ip + "............")

			if not is_valid_ip(ip) then exit ("Probe Failed: Invalid IP") //check if the IP is in fact a valid IP, if not, we get prompted it's not valid
			
			router = get_router(ip) // fetch routher
			if not router then exit("Probe Failed: Unable to find specified router") // check if we can find a router with the IP
			
			ports = router.used_ports // fetch all ports used on router
			print("\n<color=green>			Port information</color>\n")
	
	        for port in ports
		    service = router.port_info(port)
		
		    if port.is_closed then
			print(service+" "+port.port_number+" "+port.get_lan_ip+" <color=green>[CLOSED]</color>")
		    else
			print(service+" "+port.port_number+" "+port.get_lan_ip+" <color=green>[OPEN]</color>")
		    end if
		
	        end for
            print("\n<color=green>			WHOIS information</color>")
	        print(whois(get_router.public_ip)+"\n")
	
	        print("\n<color=green>			Other information</color>\n")
	        kernel = metaxploit.net_use(get_router.public_ip).dump_lib.version
	        print("kernel_router: "+kernel+"\n")
			user_input("Press any key to return to menu")
			menu="0"
			mainmenu(menu)
			
			
		end if
	end if
end if
end if

end if 

if selection == "2" then
	print(line)
	print("Preparing attack sequence...")
	print(line)
	print("Specify target type...")
	target = user_input("<color=#c90076>Blue Ribbon[ Website? Y/N ] > </color>")
	
	if target == "Y" then
		domain= user_input("<color=#c90076>Blue Ribbon[ Domain ] > </color")
		ip = nslookup(domain) //since we can not directly probe domains, we need to first convert the domain to IP and then store it in a variable
		print("Probing " + ip + "............")
		router = get_router(ip) // fetch the router 
		ports = router.used_ports // fetch all ports used on router
					print("\n<color=green>			Port information</color>\n")
	
	        for port in ports
		    service = router.port_info(port)
		
		    if port.is_closed then
			print(service+" "+port.port_number+" "+port.get_lan_ip+" <color=green>[CLOSED]</color>")
		    else
			print(service+" "+port.port_number+" "+port.get_lan_ip+" <color=green>[OPEN]</color>")
		    end if
		
	        end for
            print("\n<color=green>			WHOIS information</color>")
	        print(whois(get_router.public_ip)+"\n")
	
	        print("\n<color=green>			Other information</color>\n")
	        kernel = metaxploit.net_use(get_router.public_ip).dump_lib.version
	        print("kernel_router: "+kernel+"\n") 
	end if
	
	if target == "N" then
		
		ip = user_input("<color=#c90076>Blue Ribbon[ Target IP: ] > </color>")
		print("Probing " + ip + "............")
		if not is_valid_ip(ip) then exit ("Probe Failed: Invalid IP") //check if the IP is in fact a valid IP, if not, we get prompted it's not valid
		
		router = get_router(ip) // fetch routher
		if not router then exit("Probe Failed: Unable to find specified router") // check if we can find a router with the IP
		
		ports = router.used_ports // fetch all ports used on router
		print ("Probe Complete - Open Ports:")
		print (line)
		if not ports then print("PORTS NOT FOUND.....") // check if we can find any ports on the IP
		
		for port in ports // loop to continiously look for ports
			print("Port#: " + port.port_number + " - " + router.port_info(port)) // print our result
		end for // break up the loop here
		print (line)
	end if
	
	option = ""
	inputisOK = null
	while inputisOK == null
		
		option = user_input("<color=#c90076>Blue Ribbon[ Port to attack ] > </color>").to_int
		print ("Acquired port: " + option + " to attack")
		portcheck = user_input("\n<color=#c90076>Blue Ribbon [Is this port correct? (Y/N)]>  </color> ") // did we select the right port?
		
		if portcheck == "N" then
			print ("Pick another port")
			
		else
			attackport = option 
			inputisOK = true // we are storing the selected port for the actual attack
		end if
	end while
	print ("Attempting to establish net session")
	print(line)
	net_session = metaxploit.net_use( ip , attackport )
	if not net_session then exit("Error: can't connect to net session")
	metaLib = net_session.dump_lib
	print (line)
	print ("Net session established")
	print (line)
	passinject = user_input ("<color=#c90076>Blue Ribbon[ Specify password for possible inject ] > </color>")
	
	quit = function(shell, pass)
		print("Password for root:")
		get_shell.launch("/etc/passwd", pass)
		shell.start_terminal
		
	end function
	
	shell = null
	pass =  null
	
	memory = metaxploit.scan(metaLib)
	for mem in memory
		address = metaxploit.scan_address(metaLib, mem).split("Unsafe check:")
		for add in address
			if add == address[0] then continue
			if shell and pass then quit(shell,pass)
			
			
			value = add[add.indexOf("<b>")+3:add.indexOf("</b>")]
			value = value.replace("\n", "")
			result = metaLib.overflow(mem, value, passinject)
			
			if typeof(result) != "shell" and typeof(result) != "computer" then continue
			if typeof(result) == "shell" then shell = result
			if typeof(result) == "shell" then comp = result.host_computer
			if typeof(result) == "computer" then comp = result
			
			
			file = comp.File("/etc/passwd")
			if not file then continue
			cont = file.get_content
			if not cont then continue
			pass = cont.split("\n")[0]
			if shell then quit(shell, pass)
		end for
		
	end for
	
	if shell then shell.start_terminal
	exit ("Attack failed")
    print (line)
				user_input("Press any key to return to menu")
				menu="0"
				mainmenu(menu)
	
	
end if
	
end if


if selection == "3" then
	
	print(line)
	print("Running local attack with memory vulnerability scan")
	print(line)
	liblocal=user_input("<color=#c90076>Blue Ribbon[ Which library to attack? init, net, kernel ] > </color>")
	liblocal = liblocal.replace("init", "/lib/init.so")
	liblocal = liblocal.replace("net", "/lib/net.so")
	liblocal = liblocal.replace("kernel", "/lib/kernel.so")
	
	print("Trying to fetch " + liblocal) // check if we have the target library
	file = get_shell.host_computer.File(liblocal)
	if file == null then // if not, you're fucked
		print (liblocal + " : " + "No such file or directory")
		
	else
		metaLib = metaxploit.load(liblocal) // load our target library with file path as library to scan within metaxploit
		passinject = user_input ("<color=#c90076>Blue Ribbon[ Specify password for possible inject ] > </color>")
		
		quit = function(shell, pass)
			print("Password for root:")
			get_shell.launch("/bin/crack", pass)
			shell.start_terminal
			
		end function
		
		shell = null
		pass =  null
		
		memory = metaxploit.scan(metaLib)
		for mem in memory
			address = metaxploit.scan_address(metaLib, mem).split("Unsafe check:")
			for add in address
				if add == address[0] then continue
				if shell and pass then quit(shell,pass)
				
				
				value = add[add.indexOf("<b>")+3:add.indexOf("</b>")]
				value = value.replace("\n", "")
				result = metaLib.overflow(mem, value, passinject)
				
				if typeof(result) != "shell" and typeof(result) != "computer" then continue
				if typeof(result) == "shell" then shell = result
				if typeof(result) == "shell" then comp = result.host_computer
				if typeof(result) == "computer" then comp = result
				
				
				file = comp.File("/etc/passwd")
				if not file then continue
				cont = file.get_content
				if not cont then continue
				pass = cont.split("\n")[0]
				if shell then quit(shell, pass)
			end for
			
		end for
		
		if shell then shell.start_terminal
		exit ("Attack failed")
        print (line)
				user_input("Press any key to return to menu")
				menu="0"
				mainmenu(menu)
		
	end if
	
end if




//router attack 


if selection =="4" then
	
	ip = user_input("<color=#c90076>Blue Ribbon[ Enter IP: ] > </color>")
	print ("Attempting to establish net session")
	net_session = metaxploit.net_use( ip )
	if not net_session then exit("Error: can't connect to net session")
	lanIP = user_input("<color=#c90076>Blue Ribbon[ Enter LAN address: ] > </color>")
	libKernel = net_session.dump_lib
	print (line)
	print ("Net session established")
	print (line)
	passinject = user_input ("<color=#c90076>Blue Ribbon[ Specify password for possible inject ] > </color>")
	
	quit = function(shell, pass)
		print("Password for root:")
		get_shell.launch("/etc/passwd", pass)
		shell.start_terminal
		
	end function
	
	shell = null
	pass =  null
	
	memory = metaxploit.scan(libKernel)
	for mem in memory
		address = metaxploit.scan_address(libKernel, mem).split("Unsafe check:")
		for add in address
			if add == address[0] then continue
			if shell and pass then quit(shell,pass)
			
			
			value = add[add.indexOf("<b>")+3:add.indexOf("</b>")]
			value = value.replace("\n", "")
			result = libKernel.overflow(mem, value, lanIP)
			
			if typeof(result) != "shell" and typeof(result) != "computer" then continue
			if typeof(result) == "shell" then shell = result
			if typeof(result) == "shell" then comp = result.host_computer
			if typeof(result) == "computer" then comp = result
			
			
			file = comp.File("/etc/passwd")
			if not file then continue
			cont = file.get_content
			if not cont then continue
			pass = cont.split("\n")[0]
			if shell then quit(shell, pass)
		end for
		
	end for
	
	if shell then shell.start_terminal
	exit ("Attack failed")
    print (line)
				user_input("Press any key to return to menu")
				menu="0"
				mainmenu(menu)
	
	
end if 


// wifi cracker implementation

if selection == "5" then
	print(line)      
	print("Loading up WiFi cracker")
	print(line)
	crypto = include_lib("/lib/crypto.so") // load up crypto with library
	if not crypto then // check if we  can fetch it from somewhere else..
		crypto = include_lib("crypto.so")
		if not crypto then exit("Missing crypto library, shutting down operation")
		
	end if
	// declare our own computer and the interface, takes eth0 by default, will be updated for dynamic use if we can have more than one interface.
	hostPC = get_shell.host_computer
	interface = "wlan0"
	
	if not crypto.airmon("start", interface) then exit ("Can not start monitoring on " + interface)
	
	print("Targets found.")
	print(line)
	
	networks = hostPC.wifi_networks(interface)
	
	if not networks then exit("Unable to fetch networks list...")
	
	// show potential targets
	
	print("Available networks:")
	print("#       BSSID            ESSID Strength")
	i = 1
	
	//for loop to split certaing things of the WifI networks up
	for network in networks
		split = network.split(" ")
		bssid = split[0]
		strength = split[1]
		essid = split[2]
		
		print(line)
		print(i + ": <b>aireplay -b " + bssid + " -e " + essid + "</b> (" + strength + ")")
		i = i + 1
	end for
	
	// slect our target to crack
	networkToCrack = "0"
	netprompt = "Select the network you want to target, from 1 to " + networks.len + ":"
	while networkToCrack.val >= network.len or networkToCrack <=0
		networkToCrack = user_input(netprompt)
	end while 
	print(line)
	// start dirty workaround until we can actually automate ACK capturing...
	networkToCrack = networkToCrack.val - 1
	user_input("Locking on network. Use <b>aireplay</b> in another terminal window to capture at least 7000 ACKs, when done, close the other terminal window and hit enter in this one.")
	// end dirty workaround when user inputs something
	
	if not crypto.airmon("stop", interface) then exit("Unable to stop monitoring on " + interface)
	print("Monitoring stopped")
	print(line)
	
	capfilepath = home_dir + "/file.cap" // store our cap file's path 
	capfile = hostPC.File(capfilepath)    // store the actual cap file for use with automation below
	
	if not capfile then exit("Cap file is missing. Did you run aireplay?") //  check if cap file is missing
	
	if not capfile.has_permission("r") then exit("Insufficient permission to open cap file for reading.") // check if we have permission to read the actual file
	
	key = crypto.aircrack(capfilepath) // storing the password created from the capfile
	
	//  check if we were even able to fetch the key
	if not key then exit("Could not crack key. Have you obtained enough ACKs and aireplayed the correct network?") 
	
	
	print("Password cracked! [ <b>" + key + "</b> ]") // displays the stored password if we got a key
	
	print("Key cracked.")
	print(line)
	
	split = networks[networkToCrack].split(" ")
	bssid = split[0]
	essid = split[2]
	status = hostPC.connect_wifi(interface, bssid, essid, key) // connect to cracked network with all information obtained previously
	print("Connecting to network " + essid) // display which WiFi we are connecting to
	
	if status == 1 then                     // check if we are connected,
		print("Connected successfully. Have fun!")
        print (line)
				user_input("Press any key to return to menu")
				menu="0"
				mainmenu(menu)
        
	else 
		print("Connection failed.")
       print (line)
				user_input("Press any key to return to menu")
				menu="0"
				mainmenu(menu)
	end if
	
	capfile.delete // yeet the cap file away, it is not necessary anymore after this operation is done.
	
	
end if

if selection =="6" then 
	
		if not active_user == "root" then
    print("<color=red>Blue Ribbon cannot be sure that this command works. It has no root access</color>")
    end if

    get_shell.host_computer.File("/").chmod("o-wrx",1)
	get_shell.host_computer.File("/").chmod("u-wr",1)
	get_shell.host_computer.File("/").chmod("g-wr",1)
		
		pwd = get_shell.host_computer.File("/etc/passwd")
		if not pwd == null then
			pwd.delete()	
		end if
		
		print("<color=green>Blue Ribbon has secured this machine.")
		print("<color=red>You have too run sudo an get root before you can do anything or your machine</color>")
        print (line)
				user_input("Press any key to return to menu")
				menu="0"
				mainmenu(menu)
		

end if
		

    
	
end function

mainmenu(menu)
