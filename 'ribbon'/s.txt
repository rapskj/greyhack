format.columns=function(string=false, x=false, y=false)
	desc="<color=purple><b>columns: this function takes a string of input, and formats it into rows and columns. Colors and other markups are supported."
	if string == "help" or x == "help" or y == "help" then exit(desc)

	if typeof(x) != "number" then return {"status":"error", "msg":"from '"+library.format.type+"': columns(str, x=false, y=false): [x:'"+x+"'] is not a valid input"}
	if typeof(y) != "number" then return {"status":"error", "msg":"from '"+library.format.type+"': columns(str, x=false, y=false): [y:'"+y+"'] is not a valid input"}
	x=" "*x
	y="char(10)"*y
	if string.split("char(10)").len == 1 then return {"status":"error", "msg":"from '"+library.format.type+"': columns(str, x=false, y=false): rows must be seperated by new line"}
	cleanList=function(list)
		newList=[]
		for i in list
			if i == "" then continue
			newList.push(i)
		end for
		return newList
	end function

	self.toStr=function(int)
		int=int+""
		return int
	end function
	self.str=string
	self.rows={}
	self.cols={}
	self.rows.list=cleanList(self.str.split("char(10)"))
	self.cols.list=self.str.split(" ")
	self.rows.countX=self.rows.list.len
	self.cols.countX=self.rows.list[0].split(" ").len

	self.map={}
	self.map.cols={}
	self.map.rows={}
	for i in range(0, self.cols.countX-1)
		self.map.cols[self.toStr(i)]=[]
		for item in self.rows.list
			item=item.split(" ")
			self.map.cols[self.toStr(i)].push(item[i])
		end for

	end for
	//print(self.map.cols)
	self.cols.countY=self.map.cols["0"].len
	parseItemLen=function(string)

		str=string+"+"
		list=str.values
		indexes=[]
		instanceCount=0
		self.invert=false

		for i in list
			if i == "<" then
				indexes.push(list.indexOf(i))
				instanceCount=instanceCount+1
			end if
			if i == ">" then
				indexes.push(list.indexOf(i))
				instanceCount=instanceCount+1
			end if
		end for

		isEven=function(int)
			if typeof(int) != "number" then return char(0)
			Int=int
			Int=Int/2+""
			index=Int.values.indexOf(".")
			if typeof(index) == "null" then return true
			if typeof(index) == "number" then return false
		end function

		if indexes.len == 1 then return str.values[:-1].join("")
		test=[]
		for index in indexes
			ind1=indexes[indexes.indexOf(index)]
			ind2=list.indexOf("<")
			if list[-1] != ">" then ind2=-1
			if list[0] != "<" then self.invert=true
			if self.invert==true then
				//if there is markup AFTER the word, then this will catch and remove it
				ind1=list.indexOf("<")
				ind2=list.indexOf(">")
				//if list[ind2] == ">" and list.hasIndex(ind2+1) then ind2=ind2+1
				a=slice(list, ind1, ind2)
				if a[-1]==">" then
					for i in range(0, a.len-1)
						list.remove(ind2-i)
					end for
				end if
				if a.indexOf(">")!=null and a.indexOf("<")!=null then result=parseItemLen(list[:-1].join("")) else result=list[:-1].join("")
				return result
			end if
			if list[ind2] == ">" and list.hasIndex(ind2+1) then ind2=ind2+1
			a=slice(list, list.indexOf(">")+1, ind2)
			if a.indexOf(">")!=null and a.indexOf("<")!=null then result=parseItemLen(a.join("")) else result=a.join("")
			return result
		end for
	end function



	self.leng={}
	self.leng2={}
	for i in range(0, self.map.cols.len-1)
		self.leng[self.toStr(i)]=0
		self.leng2[self.toStr(i)]=0
		self.head=self.map.cols[self.toStr(i)][0]
		self.head=parseItemLen(self.head)

		for item in self.map.cols[self.toStr(i)]
			itemLen=parseItemLen(item).len
			if self.head.len <= itemLen then
				if self.leng[self.toStr(i)] < itemLen then self.leng[self.toStr(i)]=itemLen
				if self.leng2[self.toStr(i)] < itemLen then self.leng2[self.toStr(i)]=itemLen
			end if
		end for
	end for

	for i in range(0, self.map.cols.len-1)
		self.head=self.map.cols[self.toStr(i)][0]
		self.head=parseItemLen(self.head)
		if self.leng[self.toStr(i)] == 0 then continue
		diff=(self.head.len-self.leng[self.toStr(i)])
		self.leng[self.toStr(i)]=diff
	end for
	indexes=range(0, self.map.cols.len-1)

	isPos=function(int)
		if int == 0 then return false
		return (self.toStr(int).split("-").len == 1)
	end function

	rotate=function(type)
		self.result=""
		self.headres=""
		self.resList=[]
		self.headresList=[]
		self.hedlist=[]
		self.itemList=[]
		self.stop=false
		self.lastIndexX=self.map.cols.len
		self.lastIndexY=self.rows.countX

		self.x=-1
		self.y=0
		self.c=0
		if type == "x" then
			while self.stop==false
				self.x=self.x+1
				self.c=self.c+1

				if self.x == self.lastIndexX then
					self.resList.push(self.result)
					self.result=""
					self.x=0
					self.y=self.y+1
				end if
				if self.y == self.lastIndexY then
					self.y=0
				end if

				self.HEADER=self.map.cols[self.toStr(self.x)][0]
				self.item=parseItemLen(self.map.cols[self.toStr(self.x)][self.y])
				self.diff=self.leng[self.toStr(self.x)]
				dd=false
				if self.y == 0 then
					stand=self.leng2[self.toStr(self.x)]+2
					ogDiff=(self.leng2[self.toStr(self.x)]-self.item.len)
					check=self.item.len+abs(ogDiff)
					if stand-check == 2 then dd=check
					if ogDiff == 0 then dd=2
					if ogDiff > 0 then dd=ogDiff+2
				end if
				if dd == false then
					stand=self.leng2[self.toStr(self.x)]+2
					ogDiff=(self.leng2[self.toStr(self.x)]-self.item.len)
					check=self.item.len+abs(ogDiff)
					if stand-check == 2 then dd=check
					if ogDiff == 0 then dd=2
					if ogDiff > 0 then dd=ogDiff+2
				end if

				notHeader=(self.y != 0)
				if (isPos(self.diff) == false and self.diff <= 0) then
					//This is for the item in the row is equal or greater than the length of the header
					//'x' is set at the beginning of the function
					if self.x == 0 then self.result=self.result+x+self.map.cols[self.toStr(self.x)][self.y]+" "*dd else self.result=self.result+self.map.cols[self.toStr(self.x)][self.y]+" "*dd
				end if

				if self.c == (self.rows.countX * self.map.cols.len) then
					self.resList.push(self.result)
					self.resList=cleanList(self.resList)
					self.stop=true
				end if
			end while
		end if
		if type == "x" then return self.resList
		return false
	end function

	self.conclusion=rotate("x")
	print(y)//'y' is set at the beginning of the function
	return self.conclusion.join("char(10)")
end function
